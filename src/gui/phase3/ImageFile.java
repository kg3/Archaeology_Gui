package gui.phase3;

import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

/**
 * All file handling and logic to open the graphic and which graphic to open is solved in this class.
 * Use getTile() to retrieve proper Image.
 * @author ronin
 */
public class ImageFile {

	private static String folder = "NewTiles";
	private static String extension = ".png";
	private static String zero = "0";
	private static String one = "1";
	private static String two = "2";
	private static String three = "3";
	private static String four = "4";
	private static String five = "5";
	private static String six = "6";
	private static String seven = "7";
	private static String eight = "8";
	private static String nine = "9";
	private static String _true = "TRUE";
	private static String _false = "FALSE";
	private static String natural = "NATURAL";
	private static String stone = "STONE";
	private static String pit = "PIT";
	private static String dirt = "DIRT";
	private static String brightgreen = "BRIGHTGREEN";
	private static String yellow = "YELLOW";
	private static String unknown = "UNKNOWN";
	
	private BufferedImage tile = null;
	
	/**
	 * Set Graphic to proper tile
	 * @param _arrayString the string outputed from the 2D array: mapPrintController() 
	 */
	public ImageFile(String _arrayString)
	{
		this.tile = getImage(_arrayString);
	}
	
	public BufferedImage getImage(String _mapReference)
	{
		switch(_mapReference.charAt(0))
		{
		case '0':
			return getZero();
		case '1':
			return getOne();
		case '2':
			return getTwo();
		case '3':
			return getThree();
		case '4':
			return getFour();
		case '5':
			return getFive();
		case '6':
			return getSix();
		case '7':
			return getSeven();
		case '8':
			return getEight();
		case '9':
			return getNine();
		case 'T':
			return getTrue();
		case 'F':		// Heritage exception, return False: Map.scanner()
			return getFalse();
		case ' ':	
			return getUnknown();
		case 'D':		//Natural_Excavated
			return getDirt();
		case 'g':		//Natural_UnExcavated
			return getNatural();
		case 'H':		//Pit_Excavated
			return getPit();
		case 'G':		//Pit_UnExcavated
			return getBrightgreen();
		case 'R':		//Stone_Excavated
			return getStone();
		case 'Y':		//Stone_UnExcavated
			return getYellow();
		}
		/*	
		Map Symbol, Stone, Excavated = R
		Map Symbol, Pit, Excavated = H
		Map Symbol, Natural, Excavated = D
		Map Symbol, Stone, Unexcavated = Y
		Map Symbol, Pit, Unexcavated = G
		Map Symbol, Natural, Unexcavated = g  */
		
		return null;	//Because....Java
	}
	
	/**
	 * Image Loader.
	 * @param _fileName constructed filename
	 * @return the BufferedImage to print in GUI
	 */
	private BufferedImage loadImage(String _name)
	{
		String _fileName = folder + "/" + _name + extension;
		File _tempFile = new File(_fileName);
		BufferedImage _tempImage = null;
		try
		{
			_tempImage = ImageIO.read(_tempFile);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.printf("\nCouldn't open or read: %s", _fileName);
		}
		return _tempImage;
	}

	/**
	 * The computed tile of this, from string inputed out of 2D Array
	 * @return the tile generated by logic
	 */
	public BufferedImage getTile() {
		return tile;
	}

	/**
	 * Set tile based on logic
	 * @param tile the tile to set
	 */
	public void setTile(BufferedImage tile) {
		this.tile = tile;
	}

	/**
	 * @return the zero
	 */
	public BufferedImage getZero() {
		return loadImage(zero);
	}

	/**
	 * @return the one
	 */
	public BufferedImage getOne() {
		return loadImage(one);
	}

	/**
	 * @return the two
	 */
	public BufferedImage getTwo() {
		return loadImage(two);
	}

	/**
	 * @return the three
	 */
	public BufferedImage getThree() {
		return loadImage(three);
	}

	/**
	 * @return the four
	 */
	public BufferedImage getFour() {
		return loadImage(four);
	}

	/**
	 * @return the five
	 */
	public BufferedImage getFive() {
		return loadImage(five);
	}

	/**
	 * @return the six
	 */
	public BufferedImage getSix() {
		return loadImage(six);
	}
	
	/**
	 * @return the seven
	 */
	public BufferedImage getSeven() {
		return loadImage(seven);
	}

	/**
	 * @return the eight
	 */
	public BufferedImage getEight() {
		return loadImage(eight);
	}

	/**
	 * @return the nine
	 */
	public BufferedImage getNine() {
		return loadImage(nine);
	}

	/**
	 * @return the _true
	 */
	public BufferedImage getTrue() {
		return loadImage(_true);
	}

	/**
	 * @return the _false
	 */
	public BufferedImage getFalse() {
		return loadImage(_false);
	}

	/**
	 * @return the natural
	 */
	public BufferedImage getNatural() {
		return loadImage(natural);
	}

	/**
	 * @return the stone
	 */
	public BufferedImage getStone() {
		return loadImage(stone);
	}

	/**
	 * @return the pit
	 */
	public BufferedImage getPit() {
		return loadImage(pit);
	}

	/**
	 * @return the dirt
	 */
	public BufferedImage getDirt() {
		return loadImage(dirt);
	}

	/**
	 * @return the brightgreen
	 */
	public BufferedImage getBrightgreen() {
		return loadImage(brightgreen);
	}

	/**
	 * @return the yellow
	 */
	public BufferedImage getYellow() {
		return loadImage(yellow);
	}

	/**
	 * @return the unknown
	 */
	public BufferedImage getUnknown() {
		return loadImage(unknown);
	}

}
